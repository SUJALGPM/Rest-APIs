const xlsx = require("xlsx");


const uplaodSheet = async (req, res) => {
    try {
        // Admin Exist or not checking......
        const AdminId = req.params.id;
        const admin = await adminModels.findById(AdminId);
        if (!admin) {
            return res.status(400).json({
                msg: "Admin Not Found"
            });
        }

        // EXCEL SHEET Upload file....
        const workbook = xlsx.readFile(req.file.path);
        const sheetName = workbook.SheetNames[0];
        const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);

        // For loop the sheet data to store in various collections
        for (const row of sheetData) {
            console.log('Sheet Data:', row);

            // // Check the TLM exists or not
            // let existTlm = await tlmModel.findOne({ TLMEmpID: row.TLMEmpID });
            // if (!existTlm) {
            //     // TLM doesn't exist, create new TLM
            //     existTlm = new tlmModel({
            //         TLMEmpID: row.TLMEmpID,
            //         TLMName: row.TLMName,
            //         Password: row.Password,
            //     });
            //     await existTlm.save();
            //     admin.Tlm.push(existTlm._id);
            //     await admin.save();
            // }

            // Check the SLM exists or not
            let existSlm = await slmModel.findOne({ SLMEmpID: row.SLMEmpID });
            if (!existSlm) {
                // SLM doesn't exist, create new SLM
                existSlm = new slmModel({
                    SLMEmpID: row.SLMEmpID,
                    ZBMName: row.ZBMName,
                    Password: row.Password,
                    doc: Date.now()
                });
                await existSlm.save();
                admin.Slm.push(existSlm._id);
                await admin.save();
            }

            // Check the FLM exists or not
            let existFlm = await flmModel.findOne({ FLMEmpID: row.FLMEmpID });
            if (!existFlm) {
                // FLM doesn't exist, create new FLM
                existFlm = new flmModel({
                    FLMEmpID: row.FLMEmpID,
                    BDMName: row.BDMName,
                    Password: row.Password,
                    doc: Date.now()
                });
                await existFlm.save();
                existSlm.Flm.push(existFlm._id);
                await existSlm.save();
            }

            // Check the MR exists or not
            let existingMr = await MrModel.findOne({ EMPID: row.EMPID });
            if (!existingMr) {
                // MR doesn't exist, create new MR
                existingMr = new MrModel({
                    EMPID: row.EMPID,
                    PSNAME: row.PSNAME,
                    Region: row.Region,
                    Number: row.Number,
                    Password: row.Password,
                    HQ: row.HQ,
                    DOJ: row.DOJ,
                    DESIGNATION: row.DESIGNATION,
                    doc: Date.now()
                });
                await existingMr.save();
                existFlm.Mrs.push(existingMr._id);
                await existFlm.save();
            }

            // Check if a doctor with the same SCCode already exists
            let existingDoctor = await DoctorModel.findOne({ SCCode: row.SCCode.replace('`', '') });
            if (!existingDoctor) {

                // Remove the backtick from SCCode
                const cleanSCCode = row.SCCode.replace('`', '');

                // Map "Active" and "Inactive" to Boolean values
                let doctorStatus = true; // Assume default status is "Active"
                if (row.DoctorStatus === "inactive") {
                    doctorStatus = false;
                }

                // Create a new doctor entry
                existingDoctor = new DoctorModel({
                    SCCode: cleanSCCode,
                    DoctorName: row.DoctorName,
                    Specialty: row.Specialty,
                    Place: row.Place,
                    CLASS: row.CLASS,
                    VF: row.VF,
                    DoctorPotential: row.DoctorPotential,
                    POBStatus: row.POBStatus,
                    POBCount: row.POBCount,
                    DoctorStatus: doctorStatus,
                    doc: Date.now()
                });
                await existingDoctor.save();

                // Associate the doctor with the MR
                existingMr.doctors.push(existingDoctor._id);
                await existingMr.save();
            }

            // Check if a doctor with the same SCCode already exists
            let existingPatient = await PatientModel.findOne({ PatientName: row.PatientName });
            if (!existingPatient) {

                // Map "Active" and "Inactive" to Boolean values
                let patientStatus = true; // Assume default status is "Active"
                if (row.PatientStatus === "DISCONTINUE") {
                    patientStatus = false;
                }

                //Calculation of total..
                const calculateTotal = row.Price * row.NoDose;

                // Extract age from the row data and parse it as an integer
                const age = parseInt(row['Age ']);

                // Create a new doctor entry
                existingPatient = new PatientModel({
                    PatientName: row.PatientName,
                    Age: age,
                    Gender: row.Gender,
                    MobileNumber: row.MobileNumber,
                    Location: row.Location,
                    // NoUnitPurchased: row.NoUnitPurchased,
                    Month: row.Month,
                    Year: row.Year,
                    PatientStatus: patientStatus,
                    Reason: row.Reason,
                    doc: Date.now(),
                    PatientType: row.PatientType,
                    Repurchase: {
                        DurationOfTherapy: row.DurationOfTherapy,
                        TotolCartiridgesPurchase: row.NoUnitPurchased,
                        DateOfPurchase: row.DateOfPurchase,
                        Delivery: row.Delivery,
                        TherapyStatus: row.TherapyStatus,
                        UnitsPrescribe: row.UnitsPrescribe,
                        Indication: row.Indication,
                        Price: row.Price,
                        NoDose: row.NoDose,
                        Total: calculateTotal,
                        Brands: row.Brands
                    }
                });
                await existingPatient.save();

                // Associate the patient with the doctor
                existingDoctor.patients.push(existingPatient._id);
                await existingDoctor.save();
            }
        }

        res.status(200).json({ message: "Data uploaded successfully" });
    } catch (error) {
        console.error(error);
        const err = error.message;
        res.status(500).json({
            error: 'Internal server error',
            err
        });
    }
};