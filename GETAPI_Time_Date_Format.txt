function formatDate(dateString) {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatTime(dateString) {
    const date = new Date(dateString);
    let hours = date.getHours();
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();
    const amOrPm = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12 || 12;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} ${amOrPm}`;
}

const getAllDetailReport = async (req, res) => {
    try {
        // Get admin ID params...
        const adminID = req.params.id;

        // Check if admin exists...
        const adminExist = await AdminModel.findById(adminID).populate('Mrs');
        if (!adminExist) {
            return res.status(404).send({ message: "Admin not found..!!", success: false });
        }

        // Extract MRs from admin...
        const mrs = adminExist.Mrs;

        // Array to store the final report...
        const detailReport = [];

        // Iterate over each MR...
        for (const mrId of mrs) {
            const mrDetails = await mrModel.User.findById(mrId);
            if (mrDetails.cardCategories.length > 0) {
                const cardCategories = mrDetails.cardCategories.map(category => ({
                    MRID: mrDetails.MRID,
                    USERNAME: mrDetails.USERNAME,
                    ROLE: mrDetails.ROLE,
                    HQ: mrDetails.HQ,
                    REGION: mrDetails.REGION,
                    BUSINESSUNIT: mrDetails.BUSINESSUNIT,
                    DOJ: mrDetails.DOJ,
                    TYPE: category.type,
                    DOCTORNAME: category.doctorName,
                    VIDEOCARD: category.videoname,
                    FILENAME: category.fileName,
                    PROCESSTIME: category.processTime,
                    MBSIZE: category.MBSize,
                    CreationDate: formatDate(category.dateOfCreation),
                    CreationTime: formatTime(category.dateOfCreation),
                    Status: category.Status
                }));
                detailReport.push(...cardCategories);
            } else {
                // If MR has no card categories, include MR details with an empty card categories array
                detailReport.push({
                    MRID: mrDetails.MRID,
                    USERNAME: mrDetails.USERNAME,
                    ROLE: mrDetails.ROLE,
                    HQ: mrDetails.HQ,
                    REGION: mrDetails.REGION,
                    BUSINESSUNIT: mrDetails.BUSINESSUNIT,
                    DOJ: mrDetails.DOJ,
                    TYPE: "",
                    DOCTORNAME: "",
                    VIDEOCARD: "",
                    FILENAME: "",
                    PROCESSTIME: "",
                    MBSIZE: "",
                    CreationDate: "",
                    CreationTime: "",
                    Status: ""
                });
            }
        }

        // Send response in JSON...
        res.status(201).json(detailReport);

    } catch (err) {
        console.error(err);
        res.status(500).send({ message: "Failed to load final Usage Report..!!!", success: false });
    }
}
